{"version":3,"sources":["components/Beers.js","components/Home.js","components/Brewery.js","components/Beer.js","Routes.js","serviceWorker.js","index.js"],"names":["Beers","react_default","a","createElement","Link","to","Component","Home","Brewery","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","breweryName","breweryData","_this2","setState","props","match","params","brewery","getBrewery","name","_this3","axios","get","SERVER_URL","then","results","data","beers","map","b","Brewery_ShowBeer","beer","ShowBeer","className","src","beer_image","description","abv","ibu","concat","key","id","style","maxHeight","maxWidth","alt","Gallery","br","Beer_Brewery","Beer","saveBeer","bind","assertThisInitialized","content","post","toConsumableArray","Beer_Gallery","Routes","HashRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5b881d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n//import axios from 'axios';\n\n//const SERVER_URL = 'http://localhost:3000/home.json'; // Change this in production.\n\nclass Beers extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Oz Beers</h2>\n        <p>\n          Go back <Link to=\"/\">home</Link>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Beers;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Welcome to Oz Beer DB</h2>\n        {/* <p>\n          Please check out our <Link to=\"/beers\">beers</Link>\n        </p> */}\n        <p>\n          Please check out our <Link to=\"/beer\">Aus Beers</Link>\n        </p>\n        {/* <p>\n          <Link to=\"/breweries/Sydney\">Sydney Breweries</Link>\n        </p>\n        <p>\n          <Link to=\"/breweries/Melbourne\">Melbourne Breweries</Link>\n        </p> */}\n      </div>\n    );\n  }\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\n//const SERVER_URL = 'https://ausbeers.herokuapp.com'; // Change this in production.\nconst SERVER_URL = 'http://localhost:3000';\n\nclass Brewery extends Component {\n  constructor() {\n    super();\n    this.state = {\n      breweryName: \"\",\n      breweryData: null\n    };\n  }\n\n  componentDidMount(){\n    this.setState({\n      breweryName: this.props.match.params.brewery\n    }, () => {\n      this.getBrewery(this.state.breweryName)\n    })\n  };\n\n  getBrewery(name){\n    axios.get(SERVER_URL + '/breweries/' + name)\n    .then( (results) => {\n      //console.log(results)\n      this.setState({breweryData: results.data});\n    });\n  }\n\n  render() {\n    if (!this.state.breweryData) {\n      return <p>Loading...</p>\n    }\n    //console.log('ping', this.state.breweryData);\n\n    return (\n      <div>\n        <h2>Brewery: { this.props.match.params.brewery }</h2>\n            <p>Go back to <Link to=\"/beer\">All Breweries</Link></p>\n        { this.state.breweryData.beers.map( (b) => <ShowBeer beer={b} />) }\n      </div>\n    );\n  }\n\n}\n\nconst ShowBeer = (props) => {\n  return(\n    <div>\n      <h3><b>Beer Name:</b>  { props.beer.name }</h3>\n      <img className=\"img\" src={props.beer.beer_image} />\n      <p><b>Brewery Notes:</b>  { props.beer.description }</p>\n      <p><b>Alcohol Content:</b>  { props.beer.abv }</p>\n      <p><b>International Bitterness Unit:</b>  { props.beer.ibu }</p>\n    </div>\n  );\n}\n\nexport default Brewery;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst SERVER_URL = 'https://ausbeers.herokuapp.com/home.json'; // Change this in production.\n\nconst Brewery = (props) => {\n  return (\n    <div>\n      <Link to={`/breweries/${props.brewery.name}`}>\n        <p key={props.brewery.id}>\n          {props.brewery.name}\n        </p>\n      </Link>\n      <br />\n      {props.brewery.beers.map(b => {\n        return <img style={ {maxHeight: \"10.5em\", maxWidth: \"10.5em\"} } src={b.beer_image} alt=\"beers\" />\n      })}\n    </div>\n  );\n}\n\nclass Gallery extends Component {\n  render() {\n    return (\n      <div>\n        { this.props.beers.map( (br) => <Brewery brewery={br} /> ) }\n      </div>\n    );\n  }\n}\n\nclass Beer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      beers: []\n    };\n    this.saveBeer = this.saveBeer.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(SERVER_URL).then( (results) => {\n      this.setState({beers: results.data});\n    });\n  };\n\n  saveBeer(content) {\n    axios.post(SERVER_URL, {content}).then((results) => {\n      // Spread operator ...\n      this.setState({ beers: [results.data, ...this.state.beers] });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>What are your favourite beers?</h1>\n        {/* <BeerForm onSubmit={ this.saveBeer }   /> */}\n        <Gallery beers={ this.state.beers }/>\n      </div>\n    );\n  }\n}\n\nexport default Beer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Beers from './components/Beers';\nimport Home from './components/Home';\nimport Brewery from './components/Brewery';\nimport Beer from './components/Beer';\nimport Header from './components/Header';\n\nconst Routes = (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={ Home } />\n      <Route exact path=\"/beers\" component={ Beers } />\n      <Route path=\"/breweries/:brewery\" component={ Brewery } />\n      <Route exact path=\"/beer\" component={ Beer } />\n    </div>\n  </Router>\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Routes from './Routes';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(Routes, document.getElementById('root'));\n// ReactDOM.render(<Beer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}